pipeline {
    agent {
        label 'nodexxx'
       }
    tools {
        maven 'maven3'
	}
    stages {
         stage('git checkout') {
             steps {
                 'git branch: 'Master' credentialId: xxxxx giturl:xxxxx'
 		}
          }
         stage('maven build') {
	     steps {
                 sh 'mvn clean package'
		}
          }
          stage('sonarQube Analysis') {
	      steps {
                 sh 'mvn sonar:sonar'
	       }
          }

          stage('docker image build') {
	      steps {
             sh'docker build -t xxxx/appname:ver .'
		}
          }
          
	 stage('docker image push') {
	      steps {
             sh'docker login -u xxxxxx -p ${xxxxxx}'
	     sh 'docker push xxxx/appname:ver '
		}
          }
	stage('kubernetes deployment') {
	      steps {
                  scripts {
                      sshagent(['k8sxx']) {
			sh 'scp -o StrictHostKeyChecking=no deploymentxxx.yml user@ipaddress:/path'
                        sh 'ssh user@ipaddress kubectl create -f deploymeentxxx.yml'
		   }
		}
          }
     }
}


---------------------------------------------------------------------------------------

apiVersion: apps/v1
kind: Deployment
metadata:
  name: xxxx
  namespace: xxxxx
  labels:
    app: appname
spec:
  replica: 3
  selector:
    matchLables:
      app: appname
  template:
    metadata:
      name: podname
      labels:
        app: appname
        xxxx: xxxx
      spec: 
        containers:
          - name: xxxx
            image: nginx
            ports:
            - containerPort: 8085
            volumeMounts:
            - name: xxxxx
              mountPath: /xxx
            - name: configMapVol
              mountPath: /xxx/xxx
	    - name: secretsVol
              mountPath: /xxx/xxx
        volumes:
          - name: xxxxx
            persistentVolumeClaim:
              claimName: xxxxx
	  - name: configMapVol
            configMap:
              name: xxxxxx
	  - name: secretsVol
            secrets:
              SecretName: xxxxxx
          
            
---

apiVersion: v1
kind: Service
metadata:
  name: xxxxx
spec:
  type: LoadBalancer
  selector:
    app: appname
  ports:
  - protocol: TCP
    ports: 80
    targetPort: 8085
    nodePort: 30001

---
apiVersion: v1
kind: PersistantVolume
metadata:
  name: pv-xxxxx
spec:
 storageClassName: xxxxx
 capacity:
   storage: 2Gi
 accessModes:
 - ReadWriteOnce
 hostPath:
   path: /xxxxx/xxxx 
 persistentVolumeReclaimPolicy: Recycle
---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-xxxx
spec:
  storageClassName: xxxx
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100MiB

---
apiVersion: v1
kind: Pod
metadata:
  name: podname
  xxx: appname
spec:
  containers:
  - name: mongodb
    image: mongodb
    ports:
    - containerPort: 27017
    env:
    - name: configMapVar
      valueFrom:
        configMapKeyRef:
          name: app-configMap
          key: xxx
    - name: SecretsVar
      valueFrom:
        SecretKeyRef:
          name: app-secrets
          key: xxx

---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
type: Opaque
data:
  secretkey1: username
  secretkey2: password
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-configMap
data:
  key1: xxxxxx
  key2: |
      xxxxxxxxxxxxxxxxxxx
      xxxxxxxxxxxxxxxxxxx
      xxxxxxxxxxxxxxxxxxx
      xxxxxxxxxxxxxxxxxxx
            

--------------------------------------------------------------

role & role binding
-------------------

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: rolename
rules:
- apiGroup: [""]
  resources: ["pods", "pods/logs", xxx]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: rolebinding-xxxx
subjects:
- kind: User
  name: xxxx
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: rolename
  apiGroup: rbac.authorization.k8s.io


ServiceAccount
--------------

apiVersion: rbac.authorization.k8s.io/v1
kind: ServiceAccount
metadata:
  name: sa-xxxx

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: rolebinding-xxxx
subjects:
- kind: ServiceAccount
  name: sa-xxxx
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: rolename
  apiGroup: rbac.authorization.k8s.io
================================================================


pipeline {
    agent {
        label 'nodexxxx'
      }
    tools {
        maven 'maven3'
     }
    environment {
        DockerTag = gitTagfunc()
     }
    stages {
        stage('git checkout') {
             steps {
                 'git branch: 'Master', credentialId: xxxxx, gitUrl: xxxxxx'
		}
	  }
        stage('maven build') {
             steps {
                 sh'mvn clean package'
		}
	  }
        stage('docker Image build') {
             steps {
                 sh 'docker build . -t xxxxx/appname:${DockerTag}'
		}
	  }
        stage('dockerhub Image Push') {
            steps {
	         withCredentials([string(credentialId: xxxxx, variable: 'password')] {
                 sh 'docker login -u username -p ${password}'
                 sh 'docker push xxxxx/appname:${DockerTag}'
		}
	     }
	}
        stage('deply to kubernetes') {
             steps {
                 sh 'chmod +x changeTag.sh'
                 sh './changeTag.sh ${DockerTag}'
                ssh-agent(['k8s-master']) {
                   sh 'scp -o StrictHostKeyChecking=no newpod.yml svc.yml ec2-user@ipaddress_k8s:/path/xxx'
                   try {
                     sh 'ssh ec2-user@ipaddress_k8s kubectl apply -f .'
                   } catch(error) {
                     sh 'ssh ec2-user@ipaddress_k8s kubectl create -f .'
                   }
                }
	    }
	  }
       
    }
}


def gitTagfunc() {
    def tag = sh script: 'git rev-parse HEAD', returnStdout=yes
    return tag
}


--------------------------------------
changeTag.sh -->
#!/bin/bash
sed "s/tagVersion/$1/g" pod.yml > newpod.yml


------------------------------------------

statefulsets
~~~~~~~~~~~~~~~~


apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: xxxxx
  labels:
    app: appname
spec:
  serviceName: svc-xxxx
  replicas: 3
  selector:
    matchLables:
      app: appname
  template:
    metadata:
      name: podname
      labels:
        app: appname
    spec:
      containers:
        - name: xxxxx
          image: nginx
          ports:
          - containerPort: 80
          volumeMounts:
          - name: vol_xxxx
            mountPath: /xxx/xxxx
  volumeClaimTemplates:
  - metadata:
      name: xxxxx
    spec:
      storageClassName: xxxx
      accessModes
      - ReadWriteOnce
      resources:
        requests:
          storage: 500MiBapiVersion: apps/v1
kind: StatefulSet
metadata:
  name: xxxxx
  labels:
    app: appname
spec:
  serviceName: svc-xxxx
  replicas: 3
  selector:
    matchLables:
      app: appname
  template:
    metadata:
      name: podname
      labels:
        app: appname
    spec:
      containers:
        - name: xxxxx
          image: nginx
          ports:
          - containerPort: 80
          volumeMounts:
          - name: vol_xxxx
            mountPath: /xxx/xxxx
  volumeClaimTemplates:
  - metadata:
      name: xxxxx
    spec:
      storageClassName: xxxx
      accessModes
      - ReadWriteOnce
      resources:
        requests:
          storage: 500MiB